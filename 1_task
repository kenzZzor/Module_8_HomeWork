public interface ICommand
{
    void Execute();  
    void Undo();     
}

public class Light
{
    public void On()
    {
        Console.WriteLine("Свет включен");
    }

    public void Off()
    {
        Console.WriteLine("Свет выключен");
    }
}
public class LightOnCommand : ICommand
{
    private Light _light;

    public LightOnCommand(Light light)
    {
        _light = light;
    }

    public void Execute()
    {
        _light.On();
    }

    public void Undo()
    {
        _light.Off();
    }
}
public class LightOffCommand : ICommand
{
    private Light _light;

    public LightOffCommand(Light light)
    {
        _light = light;
    }

    public void Execute()
    {
        _light.Off();
    }

    public void Undo()
    {
        _light.On();
    }
}



public class Door
{
    public void Open()
    {
        Console.WriteLine("Дверь открыта");
    }

    public void Close()
    {
        Console.WriteLine("Дверь закрыта");
    }
}
public class DoorOpenCommand : ICommand
{
    private Door _door;

    public DoorOpenCommand(Door door)
    {
        _door = door;
    }

    public void Execute()
    {
        _door.Open();
    }

    public void Undo()
    {
        _door.Close();
    }
}
public class DoorCloseCommand : ICommand
{
    private Door _door;

    public DoorCloseCommand(Door door)
    {
        _door = door;
    }

    public void Execute()
    {
        _door.Close();
    }

    public void Undo()
    {
        _door.Open();
    }
}



public class Thermostat
{
    private int temperature;

    public void SetTemperature(int newTemperature)
    {
        temperature = newTemperature;
        Console.WriteLine($"Температура установлена на {temperature} градусов");
    }

    public void IncreaseTemperature(int increment)
    {
        temperature += increment;
        Console.WriteLine($"Температура увеличена до {temperature} градусов");
    }

    public void DecreaseTemperature(int decrement)
    {
        temperature -= decrement;
        Console.WriteLine($"Температура уменьшена до {temperature} градусов");
    }
}
public class ThermostatIncreaseCommand : ICommand
{
    private Thermostat _thermostat;
    private int _increment;

    public ThermostatIncreaseCommand(Thermostat thermostat, int increment)
    {
        _thermostat = thermostat;
        _increment = increment;
    }

    public void Execute()
    {
        _thermostat.IncreaseTemperature(_increment);
    }

    public void Undo()
    {
        _thermostat.DecreaseTemperature(_increment);
    }
}
public class ThermostatDecreaseCommand : ICommand
{
    private Thermostat _thermostat;
    private int _decrement;

    public ThermostatDecreaseCommand(Thermostat thermostat, int decrement)
    {
        _thermostat = thermostat;
        _decrement = decrement;
    }

    public void Execute()
    {
        _thermostat.DecreaseTemperature(_decrement);
    }

    public void Undo()
    {
        _thermostat.IncreaseTemperature(_decrement);
    }
}


public class RemoteControl
{
    private ICommand _lastCommand;

    public void SetCommand(ICommand command)
    {
        _lastCommand = command;
        _lastCommand.Execute();
    }

    public void UndoLastCommand()
    {
        if (_lastCommand != null)
        {
            _lastCommand.Undo();
        }
        else
        {
            Console.WriteLine("Нет команды для отмены.");
        }
    }
}


public class TV
{
    public void On()
    {
        Console.WriteLine("Телевизор включен");
    }

    public void Off()
    {
        Console.WriteLine("Телевизор выключен");
    }
}

public class TVOnCommand : ICommand
{
    private TV _tv;

    public TVOnCommand(TV tv)
    {
        _tv = tv;
    }

    public void Execute()
    {
        _tv.On();
    }

    public void Undo()
    {
        _tv.Off();
    }
}

public class TVOffCommand : ICommand
{
    private TV _tv;

    public TVOffCommand(TV tv)
    {
        _tv = tv;
    }

    public void Execute()
    {
        _tv.Off();
    }

    public void Undo()
    {
        _tv.On();
    }
}



public class RemoteControlWithHistory
{
    private Stack<ICommand> _commandHistory = new Stack<ICommand>();

    public void SetCommand(ICommand command)
    {
        command.Execute();
        _commandHistory.Push(command);
    }

    public void UndoLastCommand()
    {
        if (_commandHistory.Count > 0)
        {
            ICommand lastCommand = _commandHistory.Pop();
            lastCommand.Undo();
        }
        else
        {
            Console.WriteLine("Нет команд для отмены.");
        }
    }
}


class Program
{
    static void Main(string[] args)
    {
        Light livingRoomLight = new Light();
        Door frontDoor = new Door();
        Thermostat homeThermostat = new Thermostat();

        ICommand lightOn = new LightOnCommand(livingRoomLight);
        ICommand lightOff = new LightOffCommand(livingRoomLight);
        ICommand doorOpen = new DoorOpenCommand(frontDoor);
        ICommand doorClose = new DoorCloseCommand(frontDoor);
        ICommand increaseTemp = new ThermostatIncreaseCommand(homeThermostat, 5);
        ICommand decreaseTemp = new ThermostatDecreaseCommand(homeThermostat, 3);

        RemoteControl remoteControl = new RemoteControl();

        remoteControl.SetCommand(lightOn);
        remoteControl.SetCommand(doorOpen);
        remoteControl.SetCommand(increaseTemp);

        Console.WriteLine("\nОтмена последней команды:");
        remoteControl.UndoLastCommand(); 

        Console.WriteLine("\nВыполнение других команд:");
        remoteControl.SetCommand(decreaseTemp);
        remoteControl.SetCommand(lightOff);
        remoteControl.SetCommand(doorClose);

        Console.WriteLine("\nОтмена последней команды:");
        remoteControl.UndoLastCommand(); 
    }
}


